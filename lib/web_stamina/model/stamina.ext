DROP VIEW IF EXISTS pertinent_submissions;
CREATE VIEW pertinent_submissions AS
  SELECT s.people,
         pe.nickname,
         s.algorithm,
         s.problem,
         p.alphabet_size,
         p.sample_sparsity,
         s.submission_time,
         s.score
    FROM submissions AS s
    JOIN problems AS p on s.problem = p.id
    JOIN people AS pe on s.people = pe.id
   WHERE NOT EXISTS (
     SELECT * FROM submissions AS s2
      WHERE s2.people          = s.people
        AND s2.algorithm       = s.algorithm
        AND s2.problem         = s.problem
        AND s2.submission_time > s.submission_time
   );

DROP VIEW IF EXISTS grid_statistics;
CREATE VIEW grid_statistics AS
  SELECT s.people, 
         s.nickname,
         s.algorithm,
         s.alphabet_size,
         s.sample_sparsity,
         min(s.submission_time) AS soonest_submission_time,
         max(s.submission_time) AS latest_submission_time,
         min(s.score) AS weakest_score,
         max(s.score) AS highest_score,
         count(s.problem) AS submission_count,
         (SELECT count(s2.problem)
            FROM pertinent_submissions AS s2
           WHERE s2.people          = s.people 
             AND s2.algorithm       = s.algorithm
             AND s2.alphabet_size   = s.alphabet_size
             AND s2.sample_sparsity = s.sample_sparsity
             AND s2.score >= 0.99) AS broken_problem_count
    FROM pertinent_submissions AS s
GROUP BY s.people, s.nickname, s.algorithm, s.alphabet_size, s.sample_sparsity;

