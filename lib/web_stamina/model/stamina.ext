-- Submissions in all submissions (the historical table) that form
-- the valid_submissions table.
DROP VIEW IF EXISTS retained_submissions;
CREATE VIEW retained_submissions AS
  SELECT * FROM submissions AS s
   WHERE submission_time = (SELECT max(submission_time) 
                              FROM submissions AS s2
                             WHERE s2.people = s.people
                               AND s2.algorithm = s.algorithm
                               AND s2.problem = s.problem);

-- A join of the valid_submissions table with the people and
-- problems tables, to get people's nickname and problem 
-- difficulty parameters (alphabet_size and sample_sparsity)
DROP VIEW IF EXISTS pertinent_submissions;
CREATE VIEW pertinent_submissions AS
  SELECT s.people,
         pe.nickname,
         s.algorithm,
         s.problem,
         p.alphabet_size,
         p.sample_sparsity,
         s.submission_time,
         s.score,
         case when s.score >= 0.99 then 3
              else 1
         end as submission_status
    FROM valid_submissions AS s
    JOIN problems AS p on s.problem = p.id
    JOIN people AS pe on s.people = pe.id;
                                     
-- Gives statistics about valid submissions, i.e. prepares the result
-- grid for further analysis
DROP VIEW IF EXISTS grid_statistics;
CREATE VIEW grid_statistics AS
  SELECT s.people, 
         s.nickname,
         s.algorithm,
         s.alphabet_size,
         s.sample_sparsity,
         min(s.submission_time) AS soonest_submission_time,
         max(s.submission_time) AS latest_submission_time,
         min(s.score) AS weakest_score,
         max(s.score) AS highest_score,
         count(s.problem) AS submission_count,
         (SELECT count(s2.problem)
            FROM pertinent_submissions AS s2
           WHERE s2.people          = s.people 
             AND s2.algorithm       = s.algorithm
             AND s2.alphabet_size   = s.alphabet_size
             AND s2.sample_sparsity = s.sample_sparsity
             AND s2.score >= 0.99) AS broken_problem_count,
        case when count(s.problem) = 5 and min(s.score) >= 0.99 then 3
             when max(s.score) >= 0.99 then 2
             else 1
         end as cell_status
    FROM pertinent_submissions AS s
GROUP BY s.people, s.nickname, s.algorithm, s.alphabet_size, s.sample_sparsity;

-- Retain only the tuples of grid_statistics that make sense for
-- the master competition grid
DROP VIEW IF EXISTS master_grid;
CREATE VIEW master_grid AS
  SELECT * FROM grid_statistics as g
   WHERE cell_status = (SELECT max(cell_status) 
                          FROM grid_statistics AS g2
                         WHERE g2.alphabet_size   = g.alphabet_size
                           AND g2.sample_sparsity = g.sample_sparsity)
     AND latest_submission_time = (SELECT min(latest_submission_time)
                                     FROM grid_statistics AS g2
                                    WHERE g2.alphabet_size   = g.alphabet_size
                                      AND g2.sample_sparsity = g.sample_sparsity
                                      AND g2.cell_status     = g.cell_status);
