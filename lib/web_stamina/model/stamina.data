# Submissions
default.submissions = []
default.valid_submissions = []

# People & challengers
default.challengers = []
default.people = []

# Cells
default.cells = [
  {:token => 1,  :alphabet_size => 2, :sample_sparsity => '100%'},
  {:token => 2,  :alphabet_size => 2, :sample_sparsity => '50%'},
  {:token => 3,  :alphabet_size => 2, :sample_sparsity => '25%'},
  {:token => 4,  :alphabet_size => 2, :sample_sparsity => '12.5%'},
  {:token => 5,  :alphabet_size => 5, :sample_sparsity => '100%'},
  {:token => 6,  :alphabet_size => 5, :sample_sparsity => '50%'},
  {:token => 7,  :alphabet_size => 5, :sample_sparsity => '25%'},
  {:token => 8,  :alphabet_size => 5, :sample_sparsity => '12.5%'},
  {:token => 9,  :alphabet_size => 10, :sample_sparsity => '100%'},
  {:token => 10, :alphabet_size => 10, :sample_sparsity => '50%'},
  {:token => 11, :alphabet_size => 10, :sample_sparsity => '25%'},
  {:token => 12, :alphabet_size => 10, :sample_sparsity => '12.5%'},
  {:token => 13, :alphabet_size => 20, :sample_sparsity => '100%'},
  {:token => 14, :alphabet_size => 20, :sample_sparsity => '50%'},
  {:token => 15, :alphabet_size => 20, :sample_sparsity => '25%'},
  {:token => 16, :alphabet_size => 20, :sample_sparsity => '12.5%'},
  {:token => 17, :alphabet_size => 50, :sample_sparsity => '100%'},
  {:token => 18, :alphabet_size => 50, :sample_sparsity => '50%'},
  {:token => 19, :alphabet_size => 50, :sample_sparsity => '25%'},
  {:token => 20, :alphabet_size => 50, :sample_sparsity => '12.5%'}
]

# Problems
default.problems = default.cells.collect{|t|
  th, probs = t.to_h, []
  5.times{|i| 
    tuple = th.merge(:id => 5*(th[:token]-1)+i+1)
    tuple.delete(:token)
    probs << tuple
  }
  probs
}.flatten

# Competition data
source_dir = File.join('contest', 'grid')
default.competition_data = (1..100).collect{|id|
  {:problem         => id,
   :target_adl      => File.read(File.join(source_dir, "#{id}_target.adl")),
   :learning_sample => File.read(File.join(source_dir, "#{id}_learning.adl")),
   :test_sample     => File.read(File.join(source_dir, "#{id}_test.adl")),
   :binary_sequence => File.read(File.join(source_dir, "#{id}_test.bin")),
  }
}