Waw.rack do
  error_handler {|k, ex|
    begin
      k.logger.fatal(ex.message)
      k.logger.fatal(ex.backtrace.join("\n"))
    rescue Exception => ex
      puts ex.message
      puts ex.backtrace.join("\n")
    end
    begin
      mail = ::Waw::Tools::MailAgent::Mail.new "Stamina server fatal error",
                                               ex.message + "\n" + ex.backtrace.join("\n"),
                                               "stamina@listes.uclouvain.be",
                                               "blambeau@gmail.com"
      k.resources.business.mail_agent << mail
      nil
    rescue Exception => ex
      puts ex.message
      puts ex.backtrace.join("\n")
      nil
    end
  }
  error_handler {|k, ex|
    [301, {'Location' => k.config.web_base + '500.html'}, ['']]
  }
  use ::Rack::CommonLogger,  Waw.logger
  use ::Rack::Session::Pool, :domain       => Waw.config.web_domain,
                             :expire_after => Waw.config.rack_session_expire
  use ::Waw::NoCache
  use ::WebStamina::RememberApp
  map '/' do
    run ::Waw::StaticController.new(:root => 'public')
  end
  map '/webserv' do
    use ::Waw::JSONController
    map '/people' do
      run ::WebStamina::Controllers::PeopleController.instance
    end
    map '/compete' do
      run ::WebStamina::Controllers::CompeteController.instance
    end
  end
  map '/activate' do
    run lambda{|env| 
      req = ::Rack::Request.new(env)
      result = ::WebStamina::Controllers::PeopleController.instance.activate_account(req.params.symbolize_keys)
      case result
        when [:success, :ok]
          [301, {'Location' => Waw.config.web_base + 'competition/compete'}, [""]]
        else
          [301, {'Location' => Waw.config.web_base + 'home?feedback=activation_ko'}, [""]]
      end          
    }
  end
  map '/raise' do
    run lambda{|env| raise ArgumentError, "mail should not be nil"}
  end
end
